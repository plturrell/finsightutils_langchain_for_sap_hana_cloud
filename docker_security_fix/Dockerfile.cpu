FROM python:3.10-slim

WORKDIR /app

# Set environment variables to force CPU-only mode
ENV FORCE_CPU=1

# Update system packages and clean up in one step to reduce layer size
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better layer caching
COPY requirements.txt /app/
COPY api/requirements.txt /app/api_requirements.txt

# Create security fixes file
RUN echo "setuptools>=78.1.1\nstarlette>=0.40.0\nfastapi>=0.111.1" > /app/security_fixes.txt

# Install secure Python dependencies with no cache
RUN pip install --no-cache-dir --upgrade pip setuptools>=78.1.1 && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r api_requirements.txt || true && \
    pip install --no-cache-dir numpy scipy pandas scikit-learn torch && \
    pip install --no-cache-dir -r security_fixes.txt

# Create necessary directories
RUN mkdir -p /app/docs/pr_notes /app/api/gpu /app/api/embeddings

# Copy application code
COPY . /app/

# Create necessary dummy modules for CPU mode
RUN echo 'import logging\nlogger = logging.getLogger("gpu_utils")\n\ndef get_gpu_info():\n    return {"gpu_count": 0, "gpu_names": []}\n\ndef is_gpu_available():\n    logger.warning("GPU check requested but running in CPU-only mode")\n    return False' > /app/api/gpu/gpu_utils.py && \
    echo 'import logging\nlogger = logging.getLogger("tensorrt_utils")\n\ndef create_tensorrt_engine(*args, **kwargs):\n    logger.warning("TensorRT requested but running in CPU-only mode")\n    return None' > /app/api/gpu/tensorrt_utils.py

# Add dummy TensorRTEmbeddings class for consistent interfaces
RUN echo 'import logging\nlogger = logging.getLogger("dummy_tensorrt_classes")\n\n# Add dummy TensorRTEmbeddings class to fix inheritance\nclass TensorRTEmbeddings:\n    def __init__(self, *args, **kwargs):\n        logger.warning("TensorRT embeddings initialized in CPU-only mode")\n\nclass EnhancedTensorRTEmbedding:\n    def __init__(self, *args, **kwargs):\n        logger.warning("Enhanced TensorRT embeddings initialized in CPU-only mode")\n\nclass TensorRTEmbeddingsWithTensorCores:\n    def __init__(self, *args, **kwargs):\n        logger.warning("TensorRT embeddings with tensor cores initialized in CPU-only mode")' > /app/api/embeddings/dummy_tensorrt_classes.py

# Create a non-root user and switch to it
RUN groupadd -r appuser && useradd -r -g appuser appuser
RUN chown -R appuser:appuser /app
USER appuser

# Expose the API port
EXPOSE 8000

# Set the entrypoint
CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000"]
