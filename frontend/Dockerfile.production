# Build stage
FROM node:18-alpine AS build

# Set working directory
WORKDIR /app

# Add dependencies
COPY package.json .
COPY package-lock.json* .

# Install dependencies with clean output and frozen lockfile
RUN npm ci --production --silent && npm cache clean --force

# Copy app source
COPY . .

# Set build environment
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Build app with production optimizations
RUN npm run build

# Production stage
FROM nginx:alpine

# Set labels for container metadata
LABEL maintainer="SAP HANA Cloud LangChain Integration"
LABEL version="1.0"
LABEL description="Production frontend for SAP HANA Cloud LangChain Integration with Arrow Flight"

# Copy built assets from build stage
COPY --from=build /app/build /usr/share/nginx/html

# Remove default nginx configuration
RUN rm /etc/nginx/conf.d/default.conf

# Add optimized nginx configuration
COPY nginx.conf /etc/nginx/conf.d/

# Add custom entrypoint to inject environment variables at runtime
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Set non-root user for enhanced security
RUN addgroup -g 101 -S appgroup && \
    adduser -u 101 -S appuser -G appgroup && \
    chown -R appuser:appgroup /var/cache/nginx && \
    chown -R appuser:appgroup /var/log/nginx && \
    chown -R appuser:appgroup /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R appuser:appgroup /var/run/nginx.pid

# Switch to non-root user
USER 101

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD [ "wget", "-q", "--spider", "http://localhost:3000" ]

# Set entry point and command
ENTRYPOINT ["/entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]