# Stage 1: Builder
FROM nvcr.io/nvidia/cuda:12.1.0-devel-ubuntu22.04 as builder

# Set build arguments
ARG BUILD_DATE
ARG VERSION

# Set environment variables for build stage
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DEBIAN_FRONTEND=noninteractive \
    TZ=UTC \
    PYTHONPATH=/app \
    PIP_NO_CACHE_DIR=1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-pip \
    python3-dev \
    build-essential \
    curl \
    wget \
    git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set up working directory
WORKDIR /app

# Install Python dependencies management tools
RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements files
COPY requirements.txt api/requirements.txt requirements-optimization.txt ./

# Install Python dependencies
RUN --mount=type=cache,target=/root/.cache/pip \
    pip3 install -r requirements.txt && \
    pip3 install -r api/requirements.txt && \
    pip3 install -r requirements-optimization.txt && \
    pip3 install --no-cache-dir langchain langchain_core dumb-init==1.2.5

# Install GPU-specific packages
RUN pip3 install --no-cache-dir torch==2.1.0+cu121 \
    transformers==4.31.0 \
    accelerate==0.21.0 \
    peft==0.4.0 \
    bitsandbytes==0.40.2 \
    -f https://download.pytorch.org/whl/torch_stable.html

# Stage 2: Runtime
FROM nvcr.io/nvidia/cuda:12.1.0-runtime-ubuntu22.04

# Set build arguments
ARG BUILD_DATE
ARG VERSION

# Set environment variables for runtime
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DEBIAN_FRONTEND=noninteractive \
    TZ=UTC \
    PYTHONPATH=/app \
    HOME=/home/appuser \
    TEST_MODE=true \
    ENABLE_CORS=true \
    LOG_LEVEL=INFO \
    FLIGHT_AUTO_START=true \
    FLIGHT_HOST=0.0.0.0 \
    FLIGHT_PORT=8815 \
    # GPU settings
    ENABLE_GPU=true \
    USE_OPTIMIZED_MODEL=true \
    CUDA_VISIBLE_DEVICES=0 \
    USE_QUANTIZATION=true \
    QUANTIZATION_BITS=4 \
    ENABLE_FLASH_ATTENTION=true \
    ENABLE_XFORMERS=true

# Create non-root user
RUN groupadd -g 1000 appgroup && \
    useradd -u 1000 -g appgroup -m -s /bin/bash appuser

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-pip \
    python3 \
    curl \
    dumb-init \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install security patches
RUN apt-get update && apt-get upgrade -y && apt-get clean && rm -rf /var/lib/apt/lists/*

# Set up working directory
WORKDIR /app

# Copy installed packages from builder stage
COPY --from=builder /usr/local/lib/python3.*/site-packages /usr/local/lib/python3/dist-packages/
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY api/ /app/api/
COPY langchain_hana/ /app/langchain_hana/
COPY LICENSE README.md /app/

# Create necessary directories with appropriate permissions
RUN mkdir -p /app/cache /app/logs /app/models && \
    chown -R appuser:appgroup /app

# Add GPU detection and optimization script
COPY --chown=appuser:appgroup <<'EOF' /app/detect_gpu.sh
#!/bin/bash

# Detect GPU type
GPU_INFO=$(nvidia-smi --query-gpu=gpu_name --format=csv,noheader)
echo "Detected GPU: $GPU_INFO"

# Set environment variables based on GPU type
if [[ $GPU_INFO == *"T4"* ]]; then
    echo "T4 GPU detected - enabling T4 optimizations"
    export T4_OPTIMIZED=true
    export USE_QUANTIZATION=true
    export QUANTIZATION_BITS=4
    export ENABLE_FLASH_ATTENTION=true
    export ENABLE_XFORMERS=true
    export PRECISION=fp16
elif [[ $GPU_INFO == *"A100"* ]]; then
    echo "A100 GPU detected - enabling A100 optimizations"
    export T4_OPTIMIZED=false
    export USE_QUANTIZATION=false
    export QUANTIZATION_BITS=8
    export ENABLE_FLASH_ATTENTION=true
    export ENABLE_XFORMERS=true
    export PRECISION=fp16
elif [[ $GPU_INFO == *"H100"* ]]; then
    echo "H100 GPU detected - enabling H100 optimizations"
    export T4_OPTIMIZED=false
    export USE_QUANTIZATION=false
    export QUANTIZATION_BITS=8
    export ENABLE_FLASH_ATTENTION=true
    export ENABLE_XFORMERS=true
    export PRECISION=bf16
else
    echo "Unknown GPU detected - using default settings"
    export T4_OPTIMIZED=false
    export USE_QUANTIZATION=true
    export QUANTIZATION_BITS=8
    export ENABLE_FLASH_ATTENTION=false
    export ENABLE_XFORMERS=false
    export PRECISION=fp32
fi

# Print settings
echo "Using the following GPU settings:"
echo "  - T4_OPTIMIZED: $T4_OPTIMIZED"
echo "  - USE_QUANTIZATION: $USE_QUANTIZATION"
echo "  - QUANTIZATION_BITS: $QUANTIZATION_BITS"
echo "  - ENABLE_FLASH_ATTENTION: $ENABLE_FLASH_ATTENTION"
echo "  - ENABLE_XFORMERS: $ENABLE_XFORMERS"
echo "  - PRECISION: $PRECISION"
EOF

RUN chmod +x /app/detect_gpu.sh

# Add startup script
COPY --chown=appuser:appgroup <<'EOF' /app/start.sh
#!/bin/bash
set -e

# Detect GPU and set appropriate settings
source /app/detect_gpu.sh

# Check if we need to run a different command
if [ "$1" = "shell" ]; then
    echo "Starting shell..."
    exec /bin/bash
elif [ "$1" = "pytest" ]; then
    echo "Running tests..."
    exec pytest "${@:2}"
elif [ "$1" = "arrow-flight" ]; then
    echo "Starting Arrow Flight server only..."
    exec python -m langchain_hana.flight.server
else
    # Start the API service
    echo "Starting API service with Arrow Flight and GPU acceleration..."
    exec uvicorn api.simplified_app:app --host 0.0.0.0 --port 8000
fi
EOF

RUN chmod +x /app/start.sh

# Add metadata labels
LABEL org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.title="Langchain Integration for SAP HANA Cloud" \
      org.opencontainers.image.description="GPU-accelerated Langchain Integration API with Arrow Flight for SAP HANA Cloud" \
      org.opencontainers.image.licenses="Apache-2.0" \
      org.opencontainers.image.vendor="SAP" \
      com.nvidia.volumes.needed="nvidia_driver"

# Expose ports for API and Arrow Flight
EXPOSE 8000 8815

# Healthcheck to verify service is running properly
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Switch to non-root user
USER appuser

# Use dumb-init as entrypoint to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Set default command
CMD ["/app/start.sh"]