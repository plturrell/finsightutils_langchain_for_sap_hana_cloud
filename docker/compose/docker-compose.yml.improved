version: '3.8'

services:
  # API service with Arrow Flight
  api:
    image: ${REGISTRY:-ghcr.io}/${ORGANIZATION:-sap}/langchain-hana:${TAG:-latest}
    build:
      context: .
      dockerfile: ${DOCKERFILE:-Dockerfile.improved}
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-1.0.0}
    ports:
      - "${API_PORT:-8000}:8000"
      - "${FLIGHT_PORT:-8815}:8815"
    restart: unless-stopped
    environment:
      # API settings
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_CORS=${ENABLE_CORS:-true}
      - TEST_MODE=${TEST_MODE:-true}
      # Arrow Flight settings
      - FLIGHT_AUTO_START=${FLIGHT_AUTO_START:-true}
      - FLIGHT_HOST=0.0.0.0
      - FLIGHT_PORT=8815
      # HANA connection settings (if applicable)
      - HANA_HOST=${HANA_HOST:-}
      - HANA_PORT=${HANA_PORT:-}
      - HANA_USER=${HANA_USER:-}
      - HANA_PASSWORD=${HANA_PASSWORD:-}
      - HANA_ENCRYPT=${HANA_ENCRYPT:-true}
      - HANA_SSL_VALIDATE_CERT=${HANA_SSL_VALIDATE_CERT:-false}
    volumes:
      - api_logs:/app/logs
      - api_cache:/app/cache
      # Mount config file if exists
      - ${CONFIG_PATH:-./api/config.py.template}:/app/api/config.py.template:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    profiles:
      - default
      - api
      - production
  
  # GPU-accelerated API service
  api-gpu:
    image: ${REGISTRY:-ghcr.io}/${ORGANIZATION:-sap}/langchain-hana-gpu:${TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile.gpu.improved
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-1.0.0}
    ports:
      - "${API_PORT:-8000}:8000"
      - "${FLIGHT_PORT:-8815}:8815"
    restart: unless-stopped
    environment:
      # API settings
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_CORS=${ENABLE_CORS:-true}
      - TEST_MODE=${TEST_MODE:-true}
      # Arrow Flight settings
      - FLIGHT_AUTO_START=${FLIGHT_AUTO_START:-true}
      - FLIGHT_HOST=0.0.0.0
      - FLIGHT_PORT=8815
      # GPU settings
      - ENABLE_GPU=${ENABLE_GPU:-true}
      - USE_OPTIMIZED_MODEL=${USE_OPTIMIZED_MODEL:-true}
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
      # HANA connection settings
      - HANA_HOST=${HANA_HOST:-}
      - HANA_PORT=${HANA_PORT:-}
      - HANA_USER=${HANA_USER:-}
      - HANA_PASSWORD=${HANA_PASSWORD:-}
      - HANA_ENCRYPT=${HANA_ENCRYPT:-true}
      - HANA_SSL_VALIDATE_CERT=${HANA_SSL_VALIDATE_CERT:-false}
    volumes:
      - api_logs:/app/logs
      - api_cache:/app/cache
      - models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: ${GPU_COUNT:-1}
              capabilities: [gpu]
    profiles:
      - gpu
      - production-gpu
  
  # Frontend service with Nginx
  frontend:
    image: ${REGISTRY:-ghcr.io}/${ORGANIZATION:-sap}/langchain-hana-frontend:${TAG:-latest}
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    depends_on:
      - api
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    restart: unless-stopped
    profiles:
      - frontend
      - production
  
  # Arrow Flight standalone service
  flight:
    image: ${REGISTRY:-ghcr.io}/${ORGANIZATION:-sap}/langchain-hana:${TAG:-latest}
    build:
      context: .
      dockerfile: ${DOCKERFILE:-Dockerfile.improved}
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-1.0.0}
    ports:
      - "${FLIGHT_PORT:-8815}:8815"
    restart: unless-stopped
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - FLIGHT_HOST=0.0.0.0
      - FLIGHT_PORT=8815
      # HANA connection settings
      - HANA_HOST=${HANA_HOST:-}
      - HANA_PORT=${HANA_PORT:-}
      - HANA_USER=${HANA_USER:-}
      - HANA_PASSWORD=${HANA_PASSWORD:-}
      - HANA_ENCRYPT=${HANA_ENCRYPT:-true}
      - HANA_SSL_VALIDATE_CERT=${HANA_SSL_VALIDATE_CERT:-false}
    volumes:
      - flight_logs:/app/logs
      - flight_cache:/app/cache
    command: ["/app/start.sh", "arrow-flight"]
    profiles:
      - flight
      - production
  
  # Unified service with both API and Frontend (all-in-one container)
  unified:
    image: ${REGISTRY:-ghcr.io}/${ORGANIZATION:-sap}/langchain-hana-unified:${TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile.unified
    ports:
      - "${API_PORT:-8000}:8000"
      - "${FLIGHT_PORT:-8815}:8815"
      - "${HTTP_PORT:-3000}:3000"
    restart: unless-stopped
    environment:
      - TEST_MODE=${TEST_MODE:-true}
      - ENABLE_CORS=${ENABLE_CORS:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - FLIGHT_AUTO_START=${FLIGHT_AUTO_START:-true}
      - FLIGHT_HOST=0.0.0.0
      - FLIGHT_PORT=8815
      - REACT_APP_API_URL=http://localhost:8000
      # HANA connection settings
      - HANA_HOST=${HANA_HOST:-}
      - HANA_PORT=${HANA_PORT:-}
      - HANA_USER=${HANA_USER:-}
      - HANA_PASSWORD=${HANA_PASSWORD:-}
      - HANA_ENCRYPT=${HANA_ENCRYPT:-true}
      - HANA_SSL_VALIDATE_CERT=${HANA_SSL_VALIDATE_CERT:-false}
    volumes:
      - unified_logs:/app/logs
      - unified_cache:/app/cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - unified
      - simple
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - monitoring
      - production

volumes:
  api_logs:
  api_cache:
  flight_logs:
  flight_cache:
  unified_logs:
  unified_cache:
  models:
  prometheus_data: