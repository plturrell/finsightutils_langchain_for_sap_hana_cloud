name: GPU-Accelerated Deployment

on:
  push:
    branches: [ main, nvidia-vercel-deployment ]
    paths:
      - 'langchain_hana/gpu/**'
      - 'api/**'
      - 'examples/**'
      - 'config/docker/**'
      - 'docs/gpu_acceleration.md'
      - '.github/workflows/gpu-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'langchain_hana/gpu/**'
      - 'api/**'
      - 'examples/**'
      - 'config/docker/**'
      - 'docs/gpu_acceleration.md'
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment Type'
        required: true
        default: 'blue-green'
        type: choice
        options:
          - blue-green
          - standard
          - minimal
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.10'
  DEPLOYMENT_TYPE: ${{ github.event.inputs.deployment_type || 'blue-green' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  test:
    name: Test GPU Acceleration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -e .[test]
          
      - name: Run unit tests (non-GPU dependent)
        run: |
          pytest tests/unit_tests/test_hana_tensorrt_components.py -k "not TestVectorSerialization" --cov=langchain_hana
          
      - name: Lint code
        run: |
          pip install flake8 black
          flake8 langchain_hana/gpu/ --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check langchain_hana/gpu/
          
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            
      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./api/Dockerfile.nvidia
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  deploy:
    name: Deploy GPU-Accelerated Application
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ env.ENVIRONMENT }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Download configuration
        run: |
          mkdir -p config/deployment
          echo "${{ secrets.DEPLOYMENT_CONFIG }}" > config/deployment/.env.${{ env.ENVIRONMENT }}
          
      - name: Set up SSH for deployment
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
          
      - name: Deploy to server
        run: |
          # Determine deployment configuration
          if [ "${{ env.DEPLOYMENT_TYPE }}" == "blue-green" ]; then
            COMPOSE_FILE="config/docker/docker-compose.blue-green.yml"
          elif [ "${{ env.DEPLOYMENT_TYPE }}" == "standard" ]; then
            COMPOSE_FILE="config/docker/docker-compose.nvidia.yml"
          else
            COMPOSE_FILE="config/docker/docker-compose.minimal.yml"
          fi
          
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Pull latest images
          docker-compose -f {{ COMPOSE_FILE }} pull
          
          # Deploy using the selected configuration
          docker-compose -f {{ COMPOSE_FILE }} --env-file .env.{{ ENVIRONMENT }} up -d
          
          # Verify deployment
          echo "Waiting for service to start..."
          sleep 10
          
          if [ "$(curl -s http://localhost:8000/health/ping)" == "pong" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment health check failed!"
            exit 1
          fi
          EOF
          
          # Replace placeholders
          sed -i "s|{{ COMPOSE_FILE }}|$COMPOSE_FILE|g" deploy.sh
          sed -i "s|{{ ENVIRONMENT }}|${{ env.ENVIRONMENT }}|g" deploy.sh
          
          # Copy files to server and deploy
          scp -o StrictHostKeyChecking=no -r deploy.sh config/docker .env.${{ env.ENVIRONMENT }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/sap-hana-deployment/
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd ~/sap-hana-deployment && chmod +x deploy.sh && ./deploy.sh"
          
      - name: Run verification tests
        run: |
          pip install requests
          python scripts/verify-deployment.py --host ${{ secrets.DEPLOY_HOST }} --port 8000
          
  notify:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Send success notification
        if: ${{ needs.deploy.result == 'success' }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "✅ GPU-Accelerated SAP HANA LangChain integration deployed successfully to ${{ env.ENVIRONMENT }}!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "✅ Deployment Successful"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GPU-Accelerated SAP HANA LangChain integration deployed to *${{ env.ENVIRONMENT }}*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\n${{ env.ENVIRONMENT }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Deployment Type:*\n${{ env.DEPLOYMENT_TYPE }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Deployed by:*\n${{ github.actor }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Send failure notification
        if: ${{ needs.deploy.result != 'success' }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "❌ GPU-Accelerated SAP HANA LangChain deployment to ${{ env.ENVIRONMENT }} failed!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "❌ Deployment Failed"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GPU-Accelerated SAP HANA LangChain deployment to *${{ env.ENVIRONMENT }}* failed!"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\n${{ env.ENVIRONMENT }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Deployment Type:*\n${{ env.DEPLOYMENT_TYPE }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${{ github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Triggered by:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}