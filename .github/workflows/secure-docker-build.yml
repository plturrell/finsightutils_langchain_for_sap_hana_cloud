name: Secure Docker Build & Push

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Custom version tag (default: date-based)'
        required: false
        type: string

jobs:
  security_scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Scout
        uses: docker/scout-action/setup@v1

  secure_docker_build:
    name: Build & Push Secure Docker Images
    runs-on: ubuntu-latest
    needs: security_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate version tag
        id: tags
        run: |
          if [ "${{ github.event.inputs.version_tag }}" != "" ]; then
            VERSION="${{ github.event.inputs.version_tag }}"
          else
            VERSION=$(date +'%Y%m%d')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "CPU_VERSION_TAG=finsightintelligence/finsight_utils_langchain_hana:cpu-$VERSION" >> $GITHUB_ENV
          echo "GPU_VERSION_TAG=finsightintelligence/finsight_utils_langchain_hana:gpu-$VERSION" >> $GITHUB_ENV

      # Create secure requirements file
      - name: Create security requirements file
        run: |
          echo "setuptools>=78.1.1" > security-requirements.txt
          echo "starlette>=0.40.0" >> security-requirements.txt
          echo "fastapi>=0.111.1" >> security-requirements.txt

      # Build and push CPU image with security fixes
      - name: Build and push secure CPU image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            finsightintelligence/finsight_utils_langchain_hana:cpu-${{ env.VERSION }}
            finsightintelligence/finsight_utils_langchain_hana:cpu-latest
          build-args: |
            FORCE_CPU=1
          cache-from: type=registry,ref=finsightintelligence/finsight_utils_langchain_hana:cpu-buildcache
          cache-to: type=registry,ref=finsightintelligence/finsight_utils_langchain_hana:cpu-buildcache,mode=max
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"
          file: |
            # syntax=docker/dockerfile:1
            FROM python:3.10-slim

            WORKDIR /app

            # Set environment variables to force CPU-only mode
            ENV FORCE_CPU=1

            # Update system packages and clean up in one step to reduce layer size
            RUN apt-get update && \
                apt-get upgrade -y && \
                apt-get install -y --no-install-recommends \
                build-essential \
                curl \
                git \
                && apt-get clean \
                && rm -rf /var/lib/apt/lists/*

            # Copy requirements first for better layer caching
            COPY requirements.txt /app/
            COPY api/requirements.txt /app/api_requirements.txt
            COPY security-requirements.txt /app/security-requirements.txt

            # Install secure Python dependencies with no cache
            RUN pip install --no-cache-dir --upgrade pip setuptools>=78.1.1 && \
                pip install --no-cache-dir -r requirements.txt && \
                pip install --no-cache-dir -r api_requirements.txt || true && \
                pip install --no-cache-dir -r security-requirements.txt && \
                pip install --no-cache-dir numpy scipy pandas scikit-learn torch

            # Create necessary directories
            RUN mkdir -p /app/docs/pr_notes /app/api/gpu /app/api/embeddings

            # Copy application code
            COPY . /app/

            # Create necessary dummy modules for CPU mode
            RUN echo 'import logging\nlogger = logging.getLogger("gpu_utils")\n\ndef get_gpu_info():\n    return {"gpu_count": 0, "gpu_names": []}\n\ndef is_gpu_available():\n    logger.warning("GPU check requested but running in CPU-only mode")\n    return False' > /app/api/gpu/gpu_utils.py && \
                echo 'import logging\nlogger = logging.getLogger("tensorrt_utils")\n\ndef create_tensorrt_engine(*args, **kwargs):\n    logger.warning("TensorRT requested but running in CPU-only mode")\n    return None' > /app/api/gpu/tensorrt_utils.py

            # Add dummy TensorRTEmbeddings class for consistent interfaces
            RUN echo 'import logging\nlogger = logging.getLogger("dummy_tensorrt_classes")\n\n# Add dummy TensorRTEmbeddings class to fix inheritance\nclass TensorRTEmbeddings:\n    def __init__(self, *args, **kwargs):\n        logger.warning("TensorRT embeddings initialized in CPU-only mode")\n\nclass EnhancedTensorRTEmbedding:\n    def __init__(self, *args, **kwargs):\n        logger.warning("Enhanced TensorRT embeddings initialized in CPU-only mode")\n\nclass TensorRTEmbeddingsWithTensorCores:\n    def __init__(self, *args, **kwargs):\n        logger.warning("TensorRT embeddings with tensor cores initialized in CPU-only mode")' > /app/api/embeddings/dummy_tensorrt_classes.py

            # Create a non-root user and switch to it
            RUN groupadd -r appuser && useradd -r -g appuser appuser
            RUN chown -R appuser:appuser /app
            USER appuser

            # Expose the API port
            EXPOSE 8000

            # Set the entrypoint
            CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000"]

      # Scan CPU image for vulnerabilities
      - name: Scan CPU image for vulnerabilities
        uses: docker/scout-action@v1
        with:
          command: cves,recommendations
          image: finsightintelligence/finsight_utils_langchain_hana:cpu-${{ env.VERSION }}
          only-severities: critical,high
          output-format: sarif

      # Build and push GPU image with security fixes
      - name: Build and push secure GPU image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            finsightintelligence/finsight_utils_langchain_hana:gpu-${{ env.VERSION }}
            finsightintelligence/finsight_utils_langchain_hana:gpu-latest
          cache-from: type=registry,ref=finsightintelligence/finsight_utils_langchain_hana:gpu-buildcache
          cache-to: type=registry,ref=finsightintelligence/finsight_utils_langchain_hana:gpu-buildcache,mode=max
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"
          file: |
            # syntax=docker/dockerfile:1
            FROM python:3.10-slim

            WORKDIR /app

            # Update system packages and clean up in one step to reduce layer size
            RUN apt-get update && \
                apt-get upgrade -y && \
                apt-get install -y --no-install-recommends \
                build-essential \
                curl \
                git \
                && apt-get clean \
                && rm -rf /var/lib/apt/lists/*

            # Copy requirements first for better layer caching
            COPY requirements.txt /app/
            COPY api/requirements.txt /app/api_requirements.txt
            COPY security-requirements.txt /app/security-requirements.txt

            # Install Python dependencies with no cache
            RUN pip install --no-cache-dir --upgrade pip setuptools>=78.1.1 && \
                pip install --no-cache-dir -r requirements.txt && \
                pip install --no-cache-dir -r api_requirements.txt || true && \
                pip install --no-cache-dir -r security-requirements.txt

            # Copy application code
            COPY . /app/

            # Create a non-root user and switch to it
            RUN groupadd -r appuser && useradd -r -g appuser appuser
            RUN chown -R appuser:appuser /app
            USER appuser

            # Expose the API port
            EXPOSE 8000

            # Set the entrypoint
            CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000"]

      # Scan GPU image for vulnerabilities
      - name: Scan GPU image for vulnerabilities
        uses: docker/scout-action@v1
        with:
          command: cves,recommendations
          image: finsightintelligence/finsight_utils_langchain_hana:gpu-${{ env.VERSION }}
          only-severities: critical,high
          output-format: sarif

      # Publish scan results
      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: docker-scout.sarif
