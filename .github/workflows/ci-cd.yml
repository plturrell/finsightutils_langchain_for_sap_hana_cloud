name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy types-requests
          pip install -e ".[dev]"
      
      - name: Lint with ruff
        run: ruff check .
      
      - name: Type check with mypy
        run: mypy langchain_hana/ api/ --ignore-missing-imports

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          pip install -e ".[dev]"
      
      - name: Run bandit
        run: bandit -r langchain_hana api -x tests/,api/examples/
      
      - name: Run safety
        run: safety check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock
          pip install -e ".[test]"
      
      - name: Run unit tests
        run: |
          pytest tests/unit_tests/ --cov=langchain_hana --cov-report=xml
      
      - name: Run end-to-end tests
        run: |
          # Install E2E test dependencies
          pip install unittest-xml-reporting
          
          # Run the tests with mock database
          cd tests/e2e_tests
          python run_tests.py --run-local --output-dir ../../test_results/e2e
          
          # Upload test results even if tests fail
        continue-on-error: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: test_results/e2e
          if-no-files-found: warn

  build-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/backend
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./backend/Dockerfile.nvidia
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Set environment variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "VERCEL_ENV=preview" >> $GITHUB_ENV
            echo "BACKEND_URL=${{ secrets.STAGING_BACKEND_URL }}" >> $GITHUB_ENV
          else
            echo "VERCEL_ENV=production" >> $GITHUB_ENV
            echo "BACKEND_URL=${{ secrets.PRODUCTION_BACKEND_URL }}" >> $GITHUB_ENV
          fi
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
          working-directory: frontend
          vercel-args: '--prod=${{ env.VERCEL_ENV == "production" }}'
          env: |
            BACKEND_URL=${{ env.BACKEND_URL }}

  deploy-backend:
    name: Deploy Backend to Kubernetes
    runs-on: ubuntu-latest
    needs: [build-backend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'
      
      - name: Set up Kubernetes config
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
      
      - name: Set deployment environment
        id: set_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v || "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          fi
      
      - name: Set up secrets
        run: |
          SECRETS_FILE="kubernetes/${{ env.DEPLOY_ENV }}/secrets.yaml"
          
          # Replace placeholders with actual secrets
          sed -i "s|{{ DB_HOST }}|${{ secrets.DB_HOST }}|g" $SECRETS_FILE
          sed -i "s|{{ DB_PORT }}|${{ secrets.DB_PORT }}|g" $SECRETS_FILE
          sed -i "s|{{ DB_USER }}|${{ secrets.DB_USER }}|g" $SECRETS_FILE
          sed -i "s|{{ DB_PASSWORD }}|${{ secrets.DB_PASSWORD }}|g" $SECRETS_FILE
          sed -i "s|{{ API_KEY }}|${{ secrets.API_KEY }}|g" $SECRETS_FILE
      
      - name: Deploy to Kubernetes
        id: deploy
        run: |
          # Set image tag based on trigger
          if [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            IMAGE_TAG="v${VERSION}"
          else
            IMAGE_TAG="sha-$(echo ${{ github.sha }} | cut -c1-7)"
          fi
          
          # Update image tag in deployment file
          DEPLOY_FILE="kubernetes/${{ env.DEPLOY_ENV }}/deployment.yaml"
          sed -i "s|image: ghcr.io/.*/backend:.*|image: ghcr.io/${{ github.repository }}/backend:${IMAGE_TAG}|g" $DEPLOY_FILE
          
          # Apply Kubernetes manifests
          kubectl apply -f kubernetes/${{ env.DEPLOY_ENV }}/namespace.yaml
          kubectl apply -f kubernetes/${{ env.DEPLOY_ENV }}/secrets.yaml
          kubectl apply -f kubernetes/${{ env.DEPLOY_ENV }}/configmap.yaml
          kubectl apply -f kubernetes/${{ env.DEPLOY_ENV }}/deployment.yaml
          kubectl apply -f kubernetes/${{ env.DEPLOY_ENV }}/service.yaml
          
          # Apply HPA for production only
          if [[ "${{ env.DEPLOY_ENV }}" == "production" ]]; then
            kubectl apply -f kubernetes/production/hpa.yaml
          fi
          
          # Get deployment URL
          NAMESPACE="langchain-hana-${{ env.DEPLOY_ENV }}"
          DEPLOYMENT_URL=$(kubectl get svc -n $NAMESPACE langchain-hana-api -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "deployment-url=https://$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
      
      - name: Verify deployment
        run: |
          # Wait for deployment to be ready
          kubectl rollout status deployment/langchain-hana-api -n ${{ steps.deploy.outputs.namespace }} --timeout=300s
          
          # Install test dependencies
          pip install requests statistics unittest-xml-reporting
          
          if [[ "${{ env.DEPLOY_ENV }}" == "production" ]]; then
            # Run full verification for production
            python scripts/verify_deployment.py --api-url ${{ steps.deploy.outputs.deployment-url }}
            
            # Run comprehensive end-to-end tests against the production deployment
            cd tests/e2e_tests
            python run_tests.py \
              --backend-url ${{ steps.deploy.outputs.deployment-url }} \
              --api-key ${{ secrets.API_KEY }} \
              --run-local=false \
              --output-dir ../../test_results/e2e-prod
          else
            # Run smoke tests for staging
            python scripts/smoke_test.py --api-url ${{ steps.deploy.outputs.deployment-url }}
            
            # Run basic functionality tests against the staging deployment
            cd tests/e2e_tests
            python run_tests.py \
              --backend-url ${{ steps.deploy.outputs.deployment-url }} \
              --api-key ${{ secrets.API_KEY }} \
              --run-local=false \
              --pattern "test_basic_functionality.py" \
              --output-dir ../../test_results/e2e-staging
          fi
      
      - name: Upload verification results
        if: env.DEPLOY_ENV == 'production'
        uses: actions/upload-artifact@v3
        with:
          name: verification-results
          path: verification_results.json
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results-${{ env.DEPLOY_ENV }}
          path: test_results/e2e-${{ env.DEPLOY_ENV }}
          if-no-files-found: warn

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Notify success
        if: ${{ !contains(needs.*.result, 'failure') }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "✅ Deployment successful for ${{ github.repository }}!\n*Environment*: ${{ env.DEPLOY_ENV }}\n*Triggered by*: ${{ github.actor }}\n*Commit/Tag*: ${{ github.ref }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify failure
        if: ${{ contains(needs.*.result, 'failure') }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "❌ Deployment failed for ${{ github.repository }}!\n*Environment*: ${{ env.DEPLOY_ENV }}\n*Triggered by*: ${{ github.actor }}\n*Commit/Tag*: ${{ github.ref }}\n*Details*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}