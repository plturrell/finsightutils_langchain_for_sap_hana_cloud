name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testing'
        type: choice
        options:
          - testing
          - staging
          - production

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          pip install -r requirements.txt
          
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Check formatting with black
        run: |
          black --check .
          
      - name: Check imports with isort
        run: |
          isort --check-only --profile black .

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-mock pytest-cov
          pip install -r requirements.txt
          
      - name: Set up mock SAP HANA environment
        run: |
          # This step sets up mock SAP HANA environment for testing
          mkdir -p mock_hana
          echo "Setting up mock SAP HANA environment for testing"
          # Copy mock files from the repository
          cp -r langchain_hana_integration/tests/mocks/* mock_hana/ || true
          
      - name: Run tests with pytest
        run: |
          pytest --cov=langchain_hana_integration tests/ -v
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine
          
      - name: Build package
        run: |
          python -m build
          
      - name: Check package with twine
        run: |
          twine check dist/*
          
      - name: Upload built package
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  deploy-testing:
    name: Deploy to Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'testing')
    environment: testing
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Download built package
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: Install package
        run: |
          pip install dist/*.whl
          
      - name: Set up test environment
        run: |
          # Create test config with mock credentials
          mkdir -p config
          echo '{
            "address": "test.hana.ondemand.com",
            "port": 443,
            "user": "TEST_USER",
            "password": "${{ secrets.HANA_TEST_PASSWORD }}",
            "encrypt": true,
            "sslValidateCertificate": false
          }' > config/connection.json
          
      - name: Run integration tests
        run: |
          # These would be real integration tests in a real environment
          echo "Running integration tests in testing environment"
          python -c "print('Integration tests passed\!')"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: deploy-testing
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Download built package
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: Install package
        run: |
          pip install dist/*.whl
          
      - name: Set up staging environment
        run: |
          # Create staging config with real credentials
          mkdir -p config
          echo '{
            "address": "staging.hana.ondemand.com",
            "port": 443,
            "user": "STAGING_USER",
            "password": "${{ secrets.HANA_STAGING_PASSWORD }}",
            "encrypt": true,
            "sslValidateCertificate": false
          }' > config/connection.json
          
      - name: Run performance tests
        run: |
          echo "Running performance tests in staging environment"
          python -c "print('Performance tests passed\!')"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Download built package
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: Install package
        run: |
          pip install dist/*.whl
          
      - name: Set up production environment
        run: |
          # Create production config with real credentials
          mkdir -p config
          echo '{
            "address": "${{ secrets.HANA_PROD_HOST }}",
            "port": 443,
            "user": "PROD_USER",
            "password": "${{ secrets.HANA_PROD_PASSWORD }}",
            "encrypt": true,
            "sslValidateCertificate": false
          }' > config/connection.json
          
      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # This would be the actual deployment step
          python -c "print('Deployment to production complete\!')"
          
      - name: Notify deployment
        run: |
          echo "Sending deployment notification"
          # This would send a notification about the deployment
EOF < /dev/null