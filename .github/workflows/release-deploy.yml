name: Release and Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      gpu_type:
        description: 'GPU type for deployment'
        required: true
        default: 'T4'
        type: choice
        options:
          - T4
          - A10
          - A100
          - CPU
      enable_tensorrt:
        description: 'Enable TensorRT optimization'
        required: true
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend to Vercel'
        required: true
        default: true
        type: boolean

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build pytest wheel
          pip install -e ".[dev,test]"
      - name: Run tests
        run: |
          pytest tests/
      - name: Build package
        run: |
          python -m build
      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 7

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
      - name: Determine GPU type
        id: gpu
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "GPU_TYPE=${{ github.event.inputs.gpu_type }}" >> $GITHUB_ENV
            echo "TENSORRT_ENABLED=${{ github.event.inputs.enable_tensorrt }}" >> $GITHUB_ENV
          else
            echo "GPU_TYPE=T4" >> $GITHUB_ENV
            echo "TENSORRT_ENABLED=true" >> $GITHUB_ENV
          fi

      # Build CPU image
      - name: Build and push CPU Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}-cpu
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build NVIDIA GPU image
      - name: Build and push GPU Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.nvidia
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}-${{ env.GPU_TYPE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TENSORRT_ENABLED=${{ env.TENSORRT_ENABLED }}
            BASE_IMAGE=nvcr.io/nvidia/pytorch:22.12-py3
            GPU_TYPE=${{ env.GPU_TYPE }}

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: docker-build
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - uses: actions/checkout@v3
      - name: Set environment variables
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "GPU_TYPE=${{ github.event.inputs.gpu_type }}" >> $GITHUB_ENV
            echo "TENSORRT_ENABLED=${{ github.event.inputs.enable_tensorrt }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "GPU_TYPE=T4" >> $GITHUB_ENV
            echo "TENSORRT_ENABLED=true" >> $GITHUB_ENV
          fi
          
          # Extract version from tag or use commit hash
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          else
            echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy to AWS EC2 (T4 instance)
        if: env.GPU_TYPE == 'T4'
        run: |
          # Run the deployment script for T4 instances
          bash ./scripts/deployment/deploy-to-nvidia-t4.sh \
            --environment ${{ env.ENVIRONMENT }} \
            --version ${{ env.VERSION }} \
            --tensorrt ${{ env.TENSORRT_ENABLED }}
          
          # Save the backend URL for frontend deployment
          echo "BACKEND_URL=$(cat deployment_url.txt)" >> $GITHUB_ENV
      
      - name: Deploy to Kubernetes (other GPU types)
        if: env.GPU_TYPE != 'T4' && env.GPU_TYPE != 'CPU'
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Configure kubectl
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          
          # Deploy with Helm
          helm upgrade --install langchain-hana ./config/kubernetes/helm \
            --set image.repository=ghcr.io/${{ github.repository }} \
            --set image.tag=${{ env.VERSION }}-${{ env.GPU_TYPE }} \
            --set environment=${{ env.ENVIRONMENT }} \
            --set tensorrt.enabled=${{ env.TENSORRT_ENABLED }} \
            --set gpu.type=${{ env.GPU_TYPE }} \
            --namespace langchain-${{ env.ENVIRONMENT }}
          
          # Get service URL
          export SERVICE_IP=$(kubectl get svc -n langchain-${{ env.ENVIRONMENT }} langchain-hana -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "BACKEND_URL=http://$SERVICE_IP:8000" >> $GITHUB_ENV
      
      - name: Deploy to Cloud (CPU only)
        if: env.GPU_TYPE == 'CPU'
        run: |
          # Deploy to Cloud Foundry
          cf login -a ${{ secrets.CF_API }} -u ${{ secrets.CF_USERNAME }} -p ${{ secrets.CF_PASSWORD }} -o ${{ secrets.CF_ORG }} -s ${{ secrets.CF_SPACE }}
          cf push langchain-hana-${{ env.ENVIRONMENT }} -f manifest.yml \
            --docker-image ghcr.io/${{ github.repository }}:${{ env.VERSION }}-cpu \
            --docker-username ${{ github.actor }} \
            --docker-password ${{ secrets.GITHUB_TOKEN }}
          
          # Get application URL
          export APP_URL=$(cf app langchain-hana-${{ env.ENVIRONMENT }} | grep routes | awk '{print $2}')
          echo "BACKEND_URL=https://$APP_URL" >> $GITHUB_ENV
      
      - name: Save Backend URL
        run: |
          echo ${{ env.BACKEND_URL }} > backend_url.txt
      
      - name: Upload Backend URL artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-url
          path: backend_url.txt
          retention-days: 1

  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: github.event.inputs.deploy_frontend != 'false'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Download Backend URL artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-url
      
      - name: Set Backend URL
        run: |
          export BACKEND_URL=$(cat backend_url.txt)
          echo "BACKEND_URL=$BACKEND_URL" >> $GITHUB_ENV
      
      - name: Install Vercel CLI
        run: npm install -g vercel
      
      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_NAME: ${{ secrets.VERCEL_PROJECT_NAME || 'sap-hana-langchain' }}
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
        run: |
          # Run Vercel deployment script
          BACKEND_URL=${{ env.BACKEND_URL }} \
          VERCEL_TOKEN=${{ secrets.VERCEL_TOKEN }} \
          VERCEL_PROJECT_NAME=${{ env.VERCEL_PROJECT_NAME }}-${{ env.ENVIRONMENT }} \
          ENVIRONMENT=${{ env.ENVIRONMENT }} \
          bash ./scripts/deployment/deploy-nvidia-vercel.sh
          
          # Save frontend URL
          export FRONTEND_URL=$(cat deployment_url.txt)
          echo "Deployed frontend to: $FRONTEND_URL"
          
          # Create deployment summary
          echo "# Deployment Complete" > deployment_summary.md
          echo "" >> deployment_summary.md
          echo "## Backend" >> deployment_summary.md
          echo "- URL: ${{ env.BACKEND_URL }}" >> deployment_summary.md
          echo "- GPU Type: ${{ github.event.inputs.gpu_type || 'T4' }}" >> deployment_summary.md
          echo "- TensorRT: ${{ github.event.inputs.enable_tensorrt || 'true' }}" >> deployment_summary.md
          echo "" >> deployment_summary.md
          echo "## Frontend" >> deployment_summary.md
          echo "- URL: $FRONTEND_URL" >> deployment_summary.md
          echo "- Environment: ${{ github.event.inputs.environment || 'staging' }}" >> deployment_summary.md
      
      - name: Upload Deployment Summary
        uses: actions/upload-artifact@v3
        with:
          name: deployment-summary
          path: deployment_summary.md
          retention-days: 7

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Generate Release Notes
        run: |
          # Get changes since last tag
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"* %s" > CHANGES.md
          
          # Create release notes
          echo "# Release $(echo ${{ github.ref }} | sed 's|refs/tags/||')" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Changes" >> RELEASE_NOTES.md
          cat CHANGES.md >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Deployment" >> RELEASE_NOTES.md
          cat artifacts/deployment-summary/deployment_summary.md >> RELEASE_NOTES.md
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/dist/*
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}