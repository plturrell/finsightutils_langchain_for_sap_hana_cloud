name: Docker Build and Push

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the images'
        required: false
        default: 'latest'
      push:
        description: 'Push images to registry'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      secure:
        description: 'Build secure versions of images'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  REGISTRY: ghcr.io
  ORGANIZATION: ${{ github.repository_owner }}
  PROJECT_NAME: langchain-hana

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          driver-opts: image=moby/buildkit:master

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: 'amd64'

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.PROJECT_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
            type=raw,value=${{ github.event.inputs.version }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Set version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version }}" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          else
            echo "VERSION=dev-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi

      - name: Set push flag
        id: push
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "PUSH=${{ github.event.inputs.push }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref_type }}" == "tag") ]]; then
            echo "PUSH=true" >> $GITHUB_ENV
          else
            echo "PUSH=false" >> $GITHUB_ENV
          fi

      - name: Set secure flag
        id: secure
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "SECURE=${{ github.event.inputs.secure }}" >> $GITHUB_ENV
          else
            echo "SECURE=false" >> $GITHUB_ENV
          fi

      - name: Build API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.SECURE == 'true' && '.docker/services/api/Dockerfile.secure' || '.docker/services/api/Dockerfile' }}
          push: ${{ env.PUSH == 'true' }}
          tags: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.PROJECT_NAME }}-api:${{ env.VERSION }},${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.PROJECT_NAME }}-api:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ env.VERSION }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            GIT_COMMIT=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            ENABLE_GPU=false
          provenance: true
          sbom: true

      - name: Build Arrow Flight image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.SECURE == 'true' && '.docker/services/arrow-flight/Dockerfile.secure' || '.docker/services/arrow-flight/Dockerfile' }}
          push: ${{ env.PUSH == 'true' }}
          tags: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.PROJECT_NAME }}-arrow-flight:${{ env.VERSION }},${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.PROJECT_NAME }}-arrow-flight:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ env.VERSION }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            GIT_COMMIT=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          provenance: true
          sbom: true

      - name: Build Frontend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.SECURE == 'true' && '.docker/services/frontend/Dockerfile.secure' || '.docker/services/frontend/Dockerfile' }}
          push: ${{ env.PUSH == 'true' }}
          tags: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.PROJECT_NAME }}-frontend:${{ env.VERSION }},${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.PROJECT_NAME }}-frontend:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ env.VERSION }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            GIT_COMMIT=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            API_URL=http://api:8000
          provenance: true
          sbom: true

      - name: Scan images for vulnerabilities
        if: env.PUSH == 'true'
        run: |
          # Install Docker Scout
          curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Scan images
          docker scout cves ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.PROJECT_NAME }}-api:${{ env.VERSION }} --format sarif > api-vulnerabilities.sarif
          docker scout cves ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.PROJECT_NAME }}-arrow-flight:${{ env.VERSION }} --format sarif > arrow-flight-vulnerabilities.sarif
          docker scout cves ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.PROJECT_NAME }}-frontend:${{ env.VERSION }} --format sarif > frontend-vulnerabilities.sarif
          
          # Output summary
          echo "Vulnerability scan completed. Results are available in the artifacts."

      - name: Upload vulnerability scan results
        if: env.PUSH == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-scan-results
          path: |
            api-vulnerabilities.sarif
            arrow-flight-vulnerabilities.sarif
            frontend-vulnerabilities.sarif

      - name: Notify build status
        if: always()
        run: |
          STATUS="${{ job.status }}"
          if [[ "$STATUS" == "success" ]]; then
            echo "Build completed successfully!"
            echo "Images built:"
            echo "- ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.PROJECT_NAME }}-api:${{ env.VERSION }}"
            echo "- ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.PROJECT_NAME }}-arrow-flight:${{ env.VERSION }}"
            echo "- ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/${{ env.PROJECT_NAME }}-frontend:${{ env.VERSION }}"
            if [[ "${{ env.PUSH }}" == "true" ]]; then
              echo "Images were pushed to the registry."
            else
              echo "Images were built but not pushed to the registry."
            fi
          else
            echo "Build failed. Check logs for details."
          fi