version: '3.8'

name: sap-hana-langchain-blue-green

services:
  # Blue deployment (active)
  api-blue:
    build:
      context: .
      dockerfile: Dockerfile.nvidia
      args:
        BASE_IMAGE: nvcr.io/nvidia/pytorch:23.12-py3
    image: langchain-hana-nvidia:blue
    container_name: sap-hana-langchain-api-blue
    ports:
      - "8000:8000"
    environment:
      # SAP HANA Cloud Connection
      - HANA_HOST=${HANA_HOST}
      - HANA_PORT=${HANA_PORT:-443}
      - HANA_USER=${HANA_USER}
      - HANA_PASSWORD=${HANA_PASSWORD}
      - DEFAULT_TABLE_NAME=${DEFAULT_TABLE_NAME:-EMBEDDINGS}
      
      # API Configuration
      - PORT=8000
      - LOG_LEVEL=INFO
      - ENABLE_CORS=true
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - JWT_SECRET=${JWT_SECRET:-sap-hana-langchain-integration-secret-key}
      - DB_MAX_CONNECTIONS=5
      - DB_CONNECTION_TIMEOUT=600
      
      # GPU Acceleration
      - GPU_ENABLED=true
      - USE_TENSORRT=true
      - TENSORRT_PRECISION=${TENSORRT_PRECISION:-fp16}
      - TENSORRT_ENGINE_CACHE_DIR=/app/trt_engines
      - BATCH_SIZE=${BATCH_SIZE:-32}
      - MAX_BATCH_SIZE=${MAX_BATCH_SIZE:-128}
      - ENABLE_MULTI_GPU=${ENABLE_MULTI_GPU:-true}
      - GPU_MEMORY_FRACTION=${GPU_MEMORY_FRACTION:-0.9}
      
      # Deployment Identification
      - DEPLOYMENT_COLOR=blue
      - DEPLOYMENT_VERSION=${BLUE_VERSION:-1.0.0}
      - HEALTH_CHECK_PATH=/health/status
      
      # Error Handling
      - ENABLE_CONTEXT_AWARE_ERRORS=true
      - ERROR_VERBOSITY=${ERROR_VERBOSITY:-standard}
      - ENABLE_ERROR_TELEMETRY=${ENABLE_ERROR_TELEMETRY:-true}
      
      # Vector Operations
      - ENABLE_PRECISE_SIMILARITY=true
      - DEFAULT_EMBEDDING_MODEL=${DEFAULT_EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
      - ENABLE_VECTOR_VISUALIZATION=true
    volumes:
      - nvidia-trt-engines-blue:/app/trt_engines
      - nvidia-api-data-blue:/app/data
      - nvidia-api-logs-blue:/app/logs
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - blue-green-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-blue.rule=Host(`api.example.com`)"
      - "traefik.http.services.api-blue.loadbalancer.server.port=8000"
      - "deployment.color=blue"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: ["python", "-m", "uvicorn", "test_app_enhanced:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

  # Green deployment (idle, for updates)
  api-green:
    build:
      context: .
      dockerfile: Dockerfile.nvidia
      args:
        BASE_IMAGE: nvcr.io/nvidia/pytorch:23.12-py3
    image: langchain-hana-nvidia:green
    container_name: sap-hana-langchain-api-green
    ports:
      - "8001:8000" # Different host port
    environment:
      # SAP HANA Cloud Connection
      - HANA_HOST=${HANA_HOST}
      - HANA_PORT=${HANA_PORT:-443}
      - HANA_USER=${HANA_USER}
      - HANA_PASSWORD=${HANA_PASSWORD}
      - DEFAULT_TABLE_NAME=${DEFAULT_TABLE_NAME:-EMBEDDINGS}
      
      # API Configuration
      - PORT=8000
      - LOG_LEVEL=INFO
      - ENABLE_CORS=true
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - JWT_SECRET=${JWT_SECRET:-sap-hana-langchain-integration-secret-key}
      - DB_MAX_CONNECTIONS=5
      - DB_CONNECTION_TIMEOUT=600
      
      # GPU Acceleration
      - GPU_ENABLED=true
      - USE_TENSORRT=true
      - TENSORRT_PRECISION=${TENSORRT_PRECISION:-fp16}
      - TENSORRT_ENGINE_CACHE_DIR=/app/trt_engines
      - BATCH_SIZE=${BATCH_SIZE:-32}
      - MAX_BATCH_SIZE=${MAX_BATCH_SIZE:-128}
      - ENABLE_MULTI_GPU=${ENABLE_MULTI_GPU:-true}
      - GPU_MEMORY_FRACTION=${GPU_MEMORY_FRACTION:-0.9}
      
      # Deployment Identification
      - DEPLOYMENT_COLOR=green
      - DEPLOYMENT_VERSION=${GREEN_VERSION:-1.0.1}
      - HEALTH_CHECK_PATH=/health/status
      
      # Error Handling
      - ENABLE_CONTEXT_AWARE_ERRORS=true
      - ERROR_VERBOSITY=${ERROR_VERBOSITY:-standard}
      - ENABLE_ERROR_TELEMETRY=${ENABLE_ERROR_TELEMETRY:-true}
      
      # Vector Operations
      - ENABLE_PRECISE_SIMILARITY=true
      - DEFAULT_EMBEDDING_MODEL=${DEFAULT_EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
      - ENABLE_VECTOR_VISUALIZATION=true
    volumes:
      - nvidia-trt-engines-green:/app/trt_engines
      - nvidia-api-data-green:/app/data
      - nvidia-api-logs-green:/app/logs
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - blue-green-network
    labels:
      - "traefik.enable=false" # Initially disabled
      - "traefik.http.routers.api-green.rule=Host(`api.example.com`)"
      - "traefik.http.services.api-green.loadbalancer.server.port=8000"
      - "deployment.color=green"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: ["python", "-m", "uvicorn", "test_app_enhanced:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: langchain-hana-frontend:latest
    container_name: sap-hana-langchain-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://traefik/api
      - VITE_APP_VERSION=1.0.0
      - VITE_ENABLE_VECTOR_VISUALIZATION=true
      - VITE_ENABLE_DARK_MODE=true
      - VITE_ENABLE_ACCESSIBILITY=true
    depends_on:
      - traefik
    restart: unless-stopped
    networks:
      - blue-green-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Traefik reverse proxy for blue-green switching
  traefik:
    image: traefik:v2.9
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
    ports:
      - "80:80"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - blue-green-network
    restart: unless-stopped

  # Health monitoring service
  healthcheck:
    build:
      context: ./config/docker/healthcheck
      dockerfile: Dockerfile
    image: langchain-hana-healthcheck:latest
    container_name: sap-hana-langchain-healthcheck
    environment:
      - BLUE_URL=http://api-blue:8000/health/status
      - GREEN_URL=http://api-green:8000/health/status
      - CHECK_INTERVAL=30
      - TRAEFIK_API_URL=http://traefik:8080/api
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - blue-green-network
    restart: unless-stopped
    depends_on:
      - api-blue
      - api-green
      - traefik

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: sap-hana-langchain-prometheus
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - blue-green-network
    restart: unless-stopped

  # Grafana dashboard
  grafana:
    image: grafana/grafana:9.5.1
    container_name: sap-hana-langchain-grafana
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
    ports:
      - "3001:3000"
    networks:
      - blue-green-network
    restart: unless-stopped
    depends_on:
      - prometheus

networks:
  blue-green-network:
    driver: bridge

volumes:
  nvidia-trt-engines-blue:
    driver: local
  nvidia-api-data-blue:
    driver: local
  nvidia-api-logs-blue:
    driver: local
  nvidia-trt-engines-green:
    driver: local
  nvidia-api-data-green:
    driver: local
  nvidia-api-logs-green:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local